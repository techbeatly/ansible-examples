---
- name: Launch EC2 instance
  ec2:
    region: "{{ ec2_server_region }}"
    group: "{{ ec2_server_security_group }}"
    keypair: "{{ ec2_server_keypair }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_server_image }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id}}"
    assign_public_ip: "{{ ec2_assign_public_ip }}"
    wait: True
    wait_timeout: 600
    count: "{{ ec2_server_instcount }}"
  register: ec2
  
- debug: var=ec2

- name: Instance Ids
  debug: msg={{ item.id }}
  with_items: "{{ ec2.instances }}"
  
- name: Set name tag for AWS instances                                                                                                                                                                                                                                                                                 
  ec2_tag:                                                                                                                                                                                                                                                                                                             
    region: "{{ ec2_server_region }}"
    resource: "{{ item.1.id }}"
    tags: 
      Name: "{{ name_prefix + '%02d' | format(item.0 + name_start_index) if ec2_server_name is not defined else ec2_server_name}}"
  with_indexed_items: "{{ ec2.instances }}"
  loop_control:
    label: item.1.id
    
- name: Set other tag for AWS instances                                                                                                                                                                                                                                                                                 
  ec2_tag:                                                                                                                                                                                                                                                                                                             
    region: "{{ ec2_server_region }}"
    resource: "{{ item.id }}"
    tags: "{{ec2_tags}}"
  with_items: "{{ ec2.instances }}"
  loop_control:
    label: item.id
  when:
    ec2_tags is defined

- set_fact:
    new_vm_uuid: "{{ec2.instances[0].id}}" 
   
- debug: var=new_vm_uuid

- name: Associate new elastic IP with instance
  ec2_eip:
    region: "{{ ec2_server_region }}"
    device_id: "{{ item.id }}"
  with_items: "{{ ec2.instances }}"    
  register: eips
  
- name: Gather facts about an AMI using ami-id
  ec2_ami_facts:
    region: "{{ ec2_server_region }}"
    image_ids: "{{ ec2_server_image }}"
  register: ami_info

- set_fact:
    ami_name: "{{ami_info.images[0].name | lower}}"

- debug: var=ami_name

- debug: var=ansible_ec2_use_public_ip

- name: Show which ip/dns name wait_for will use
  debug: msg="{{ item.public_dns_name if ansible_ec2_use_public_ip else item.private_ip }}"
  with_items: "{{ ec2.instances }}"
  when: '"windows" not in ami_name'

- name: Wait for SSH
  wait_for: 
    host: "{{ item.public_dns_name if ansible_ec2_use_public_ip else item.private_ip }}"
    port: 22
    delay: 25
    timeout: 320
    state: started
  with_items: "{{ ec2.instances }}"
  when: '"windows" not in ami_name'

- name: Add hosts group temporary inventory group
  add_host:
    name: "{{ item.public_dns_name if ansible_ec2_use_public_ip else item.private_ip }}"
    group: " {{ec2_server_group_name }}"
  with_items: "{{ ec2.instances }}"

- set_stats:
    data:
      instance_id: "{{ new_vm_uuid }}"
